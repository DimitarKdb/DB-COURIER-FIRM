
 CREATE TABLE Customers (

    UCN CHAR(10) NOT NULL,
    ADDRESS VARCHAR(100) NOT NULL ,
    PHONE_NUMBER VARCHAR(14) NOT NULL ,
    FIRST_NAME VARCHAR(20) NOT NULL,
    LAST_NAME VARCHAR(20) NOT NULL

 );

--Course (CourseStatus, CourseID, StartedFrom, EndedAt, WeightTransported, StartDate, EndDate, WorkerID)

CREATE TABLE Course (

    COURSE_ID INTEGER NOT NULL,
    COURSE_STATUS VARCHAR(12) NOT NULL,
    STARTED_FROM VARCHAR(20) NOT NULL,
    ENDED_AT VARCHAR(20) NOT NULL,
    COURSE_WEIGHT INTEGER,
    START_DATE DATE NOT NULL,
    END_DATE DATE NOT NULL,
    WORKER_ID CHAR(6) NOT NULL

);

--DeliveryWorker (WorkerID, YearsOfExperience, FirstName, ServiceRating, Salary, OfficeNumber)

CREATE TABLE DeliveryWorkers (

    WORKER_ID CHAR(6) NOT NULL,
    YEARS_EXP SMALLINT NOT NULL,
    FIRST_NAME VARCHAR(20) NOT NULL,
    SERVICE_RATING SMALLINT NOT NULL,
    SALARY DOUBLE,
    OFFICE_NUMBER VARCHAR(6) NOT NULL

);

--Offices (StreetAddress, EmployeesCount, City, OfficeNumber, OfficeRating)

CREATE TABLE Offices (

    ADDRESS VARCHAR(20) NOT NULL,
    EMPLOYEES_CNT SMALLINT NOT NULL,
    CITY_LOCATION VARCHAR(20) NOT NULL,
    OFFICE_NUMBER VARCHAR(6) NOT NULL,
    OFFICE_RATING SMALLINT NOT NULL

);


/*
 Packages (PackageID, DeliveryAddress, EstimatedDeliveryTime, DeliveryStatus,
          DeliveryFee, CourseID, WorkerID, OfficeNumber, DateCollected, ReceiverUCN, DateSent, SenderUCN)
*/

CREATE TABLE Packages (

    PACKAGE_ID VARCHAR(6) NOT NULL,
    DELIVERY_ADDR VARCHAR(20) NOT NULL,
    ESTIMATED_DELIVERY SMALLINT NOT NULL,
    DELIVERY_STAT VARCHAR(12) NOT NULL,
    DELIVERY_FEE INTEGER NOT NULL,
    COURSE_ID INTEGER NOT NULL,
    WORKER_ID char(6) NOT NULL,
    OFFICE_NUMBER VARCHAR(6) NOT NULL,
    DATE_COLLECTED DATE,
    DATE_SENT DATE,
    RECEIVER_UCN CHAR(10) NOT NULL,
    SENDER_UCN CHAR(10) NOT NULL

);

--PRIMARY KEYS:

ALTER TABLE Customers ADD PRIMARY KEY (UCN);
ALTER TABLE Course ADD PRIMARY KEY (COURSE_ID);
ALTER TABLE DeliveryWorkers ADD PRIMARY KEY (WORKER_ID);
ALTER TABLE Offices ADD PRIMARY KEY (OFFICE_NUMBER);
ALTER TABLE Packages ADD PRIMARY KEY (PACKAGE_ID);

--FOREIGN KEYS:

ALTER TABLE Packages ADD FOREIGN KEY (COURSE_ID) references Course(COURSE_ID);
ALTER TABLE Packages ADD FOREIGN KEY (WORKER_ID) references DeliveryWorkers(WORKER_ID);
ALTER TABLE Packages ADD FOREIGN KEY (OFFICE_NUMBER) references Offices(OFFICE_NUMBER);
ALTER TABLE Packages ADD FOREIGN KEY (RECEIVER_UCN) references Customers(UCN);
ALTER TABLE Packages ADD FOREIGN KEY (SENDER_UCN) references Customers(UCN);

ALTER TABLE DeliveryWorkers ADD FOREIGN KEY (OFFICE_NUMBER) references Offices(OFFICE_NUMBER);

ALTER TABLE Course ADD FOREIGN KEY (WORKER_ID) references DeliveryWorkers(WORKER_ID);



--CHECKS:
ALTER TABLE Packages ADD CONSTRAINT DATE_CK CHECK ( Packages.DATE_SENT < Packages.DATE_COLLECTED );
ALTER TABLE Packages ADD CONSTRAINT DELVR_TIME_CK CHECK ( Packages.ESTIMATED_DELIVERY > 0 );
ALTER TABLE Packages ADD CONSTRAINT DELVR_FEE_CK CHECK ( Packages.DELIVERY_FEE > 0 );

ALTER TABLE Course ADD CONSTRAINT COURSE_DATE_CK CHECK ( Course.START_DATE < Course.END_DATE );
ALTER TABLE Course ADD CONSTRAINT COURSE_ID_CK CHECK ( Course.COURSE_ID > 0 );
ALTER TABLE Course ADD CONSTRAINT COURSE_WT_CK CHECK ( Course.COURSE_WEIGHT > 0 );

ALTER TABLE DeliveryWorkers ADD CONSTRAINT YEARS_EXP_CK CHECK ( DeliveryWorkers.YEARS_EXP > 0 );
ALTER TABLE DeliveryWorkers ADD CONSTRAINT SERVICE_VAL_CK CHECK ( DeliveryWorkers.SERVICE_RATING >= 0 and DeliveryWorkers.SERVICE_RATING <= 5 );
ALTER TABLE DeliveryWorkers ADD CONSTRAINT SALARY_CK CHECK ( DeliveryWorkers.SALARY > 0 );
ALTER TABLE DeliveryWorkers ADD CONSTRAINT WORKERID_LEN_CK CHECK ( LENGTH(DeliveryWorkers.WORKER_ID) = 6 );

ALTER TABLE Offices ADD CONSTRAINT OFFICE_RATE_CK CHECK ( Offices.OFFICE_RATING >= 0 and Offices.OFFICE_RATING <= 5 );

ALTER TABLE Customers ADD CONSTRAINT UCN_LEN_CK CHECK ( LENGTH(Customers.UCN) = 10 );

